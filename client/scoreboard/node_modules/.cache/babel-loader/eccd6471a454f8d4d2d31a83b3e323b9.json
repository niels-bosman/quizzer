{"ast":null,"code":"var _jsxFileName = \"/home/niels/Projects/school/quizzer/client/scoreboard/src/components/WinnerGraph.js\";\nimport WinnerGraphBar from './WinnerGraphBar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst WinnerGraph = () => {\n  const winners = [{\n    _id: 'Team een',\n    score: 24,\n    questionsCorrect: 11\n  }, {\n    _id: 'Team twee',\n    score: 18,\n    questionsCorrect: 7\n  }, {\n    _id: 'Team drie',\n    score: 16,\n    questionsCorrect: 6\n  }];\n\n  const calculatePercentage = (maxScore, ownScore) => Math.round(ownScore / maxScore * 100 / 1.5);\n\n  const [first, second, third] = [...winners];\n  const orderedWinners = [{ ...second,\n    place: 2,\n    percentage: calculatePercentage(first.score, second.score)\n  }, { ...first,\n    place: 1,\n    percentage: 100\n  }, { ...third,\n    place: 3,\n    percentage: calculatePercentage(first.score, third.score)\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"m-winner-graph\",\n    children: orderedWinners.map((winner, index) => /*#__PURE__*/_jsxDEV(WinnerGraphBar, {\n      name: winner._id,\n      score: winner.score,\n      place: index + 1 === 1 ? 2 : index + 1 === 2 ? 1 : 3,\n      percentage: winner.percentage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n\n_c = WinnerGraph;\nexport default WinnerGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"WinnerGraph\");","map":{"version":3,"sources":["/home/niels/Projects/school/quizzer/client/scoreboard/src/components/WinnerGraph.js"],"names":["WinnerGraphBar","WinnerGraph","winners","_id","score","questionsCorrect","calculatePercentage","maxScore","ownScore","Math","round","first","second","third","orderedWinners","place","percentage","map","winner","index"],"mappings":";AAAA,OAAOA,cAAP,MAA2B,kBAA3B;;;AAEA,MAAMC,WAAW,GAAG,MAAM;AACxB,QAAMC,OAAO,GAAG,CACd;AACEC,IAAAA,GAAG,EAAe,UADpB;AAEEC,IAAAA,KAAK,EAAa,EAFpB;AAGEC,IAAAA,gBAAgB,EAAE;AAHpB,GADc,EAMd;AACEF,IAAAA,GAAG,EAAe,WADpB;AAEEC,IAAAA,KAAK,EAAa,EAFpB;AAGEC,IAAAA,gBAAgB,EAAE;AAHpB,GANc,EAWd;AACEF,IAAAA,GAAG,EAAe,WADpB;AAEEC,IAAAA,KAAK,EAAa,EAFpB;AAGEC,IAAAA,gBAAgB,EAAE;AAHpB,GAXc,CAAhB;;AAkBA,QAAMC,mBAAmB,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwBC,IAAI,CAACC,KAAL,CAAYF,QAAQ,GAAGD,QAAZ,GAAwB,GAAxB,GAA8B,GAAzC,CAApD;;AAEA,QAAM,CAACI,KAAD,EAAQC,MAAR,EAAgBC,KAAhB,IAAyB,CAAC,GAAGX,OAAJ,CAA/B;AAEA,QAAMY,cAAc,GAAG,CACrB,EAAE,GAAGF,MAAL;AAAaG,IAAAA,KAAK,EAAE,CAApB;AAAuBC,IAAAA,UAAU,EAAEV,mBAAmB,CAACK,KAAK,CAACP,KAAP,EAAcQ,MAAM,CAACR,KAArB;AAAtD,GADqB,EAErB,EAAE,GAAGO,KAAL;AAAYI,IAAAA,KAAK,EAAE,CAAnB;AAAsBC,IAAAA,UAAU,EAAE;AAAlC,GAFqB,EAGrB,EAAE,GAAGH,KAAL;AAAYE,IAAAA,KAAK,EAAE,CAAnB;AAAsBC,IAAAA,UAAU,EAAEV,mBAAmB,CAACK,KAAK,CAACP,KAAP,EAAcS,KAAK,CAACT,KAApB;AAArD,GAHqB,CAAvB;AAMA,sBACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,cACGU,cAAc,CAACG,GAAf,CAAmB,CAACC,MAAD,EAASC,KAAT,kBAClB,QAAC,cAAD;AACE,MAAA,IAAI,EAAED,MAAM,CAACf,GADf;AAEE,MAAA,KAAK,EAAEe,MAAM,CAACd,KAFhB;AAGE,MAAA,KAAK,EAAEe,KAAK,GAAC,CAAN,KAAY,CAAZ,GAAgB,CAAhB,GAAoBA,KAAK,GAAC,CAAN,KAAY,CAAZ,GAAgB,CAAhB,GAAoB,CAHjD;AAIE,MAAA,UAAU,EAAED,MAAM,CAACF;AAJrB;AAAA;AAAA;AAAA;AAAA,YADD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CAzCD;;KAAMf,W;AA2CN,eAAeA,WAAf","sourcesContent":["import WinnerGraphBar from './WinnerGraphBar';\n\nconst WinnerGraph = () => {\n  const winners = [\n    {\n      _id:              'Team een',\n      score:            24,\n      questionsCorrect: 11,\n    },\n    {\n      _id:              'Team twee',\n      score:            18,\n      questionsCorrect: 7,\n    },\n    {\n      _id:              'Team drie',\n      score:            16,\n      questionsCorrect: 6,\n    },\n  ];\n\n  const calculatePercentage = (maxScore, ownScore) => Math.round((ownScore / maxScore) * 100 / 1.5);\n\n  const [first, second, third] = [...winners];\n\n  const orderedWinners = [\n    { ...second, place: 2, percentage: calculatePercentage(first.score, second.score) },\n    { ...first, place: 1, percentage: 100 },\n    { ...third, place: 3, percentage: calculatePercentage(first.score, third.score) },\n  ];\n\n  return (\n    <div className=\"m-winner-graph\">\n      {orderedWinners.map((winner, index) => (\n        <WinnerGraphBar\n          name={winner._id}\n          score={winner.score}\n          place={index+1 === 1 ? 2 : index+1 === 2 ? 1 : 3}\n          percentage={winner.percentage}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default WinnerGraph;"]},"metadata":{},"sourceType":"module"}