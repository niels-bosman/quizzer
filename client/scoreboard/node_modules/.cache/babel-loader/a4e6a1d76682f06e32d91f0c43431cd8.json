{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\nconst initialState = {\n  lobbyId: '',\n  teams: [],\n  results: []\n};\nexport const fetchTeams = createAsyncThunk('category/fetchTeamsStatus', async (_, {\n  getState\n}) => {\n  var _getState;\n\n  const lobbyId = (_getState = getState()) === null || _getState === void 0 ? void 0 : _getState.quiz.lobbyId;\n  const teams = await axios.get(`${process.env.REACT_APP_API_URI}/lobbies/${lobbyId}/teams`);\n  return teams.data;\n});\nexport const fetchCorrectAnswers = createAsyncThunk('category/fetchCorrectAnswersStatus', async (_, {\n  getState\n}) => {\n  var _getState2;\n\n  const lobbyId = (_getState2 = getState()) === null || _getState2 === void 0 ? void 0 : _getState2.quiz.lobbyId;\n  const teams = await axios.get(`${process.env.REACT_APP_API_URI}/lobbies/${lobbyId}/round-score`);\n  return teams.data;\n});\nexport const fetchResults = createAsyncThunk('category/fetchResultsStatus', async (_, {\n  getState\n}) => {\n  var _getState3;\n\n  const lobbyId = (_getState3 = getState()) === null || _getState3 === void 0 ? void 0 : _getState3.quiz.lobbyId;\n  const results = await axios.get(`${process.env.REACT_APP_API_URI}/lobbies/${lobbyId}/lobby-score`);\n  return results.data;\n});\nexport const slice = createSlice({\n  name: 'quiz',\n  initialState,\n  extraReducers: {\n    [fetchTeams.fulfilled]: (state, {\n      payload\n    }) => {\n      state.teams = payload;\n    },\n    [fetchCorrectAnswers.fulfilled]: (state, {\n      payload\n    }) => {\n      state.roundScore = payload;\n    },\n    [fetchResults.fulfilled]: (state, {\n      payload\n    }) => {\n      state.results = payload;\n    }\n  },\n  reducers: {\n    setLobbyId: (state, {\n      payload\n    }) => {\n      state.lobbyId = payload;\n    }\n  }\n});\nexport const {\n  setLobbyId\n} = slice.actions;\nexport default slice.reducer;","map":{"version":3,"sources":["/home/niels/Projects/school/quizzer/client/scoreboard/src/reducers/quiz.js"],"names":["createAsyncThunk","createSlice","axios","initialState","lobbyId","teams","results","fetchTeams","_","getState","quiz","get","process","env","REACT_APP_API_URI","data","fetchCorrectAnswers","fetchResults","slice","name","extraReducers","fulfilled","state","payload","roundScore","reducers","setLobbyId","actions","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,EADU;AAEnBC,EAAAA,KAAK,EAAI,EAFU;AAGnBC,EAAAA,OAAO,EAAE;AAHU,CAArB;AAMA,OAAO,MAAMC,UAAU,GAAGP,gBAAgB,CAAC,2BAAD,EAA8B,OAAOQ,CAAP,EAAU;AAAEC,EAAAA;AAAF,CAAV,KAA2B;AAAA;;AACjG,QAAML,OAAO,gBAAGK,QAAQ,EAAX,8CAAG,UAAYC,IAAZ,CAAiBN,OAAjC;AACA,QAAMC,KAAK,GAAK,MAAMH,KAAK,CAACS,GAAN,CAAW,GAAEC,OAAO,CAACC,GAAR,CAAYC,iBAAkB,YAAWV,OAAQ,QAA9D,CAAtB;AAEA,SAAOC,KAAK,CAACU,IAAb;AACD,CALyC,CAAnC;AAOP,OAAO,MAAMC,mBAAmB,GAAGhB,gBAAgB,CAAC,oCAAD,EAAuC,OAAOQ,CAAP,EAAU;AAAEC,EAAAA;AAAF,CAAV,KAA2B;AAAA;;AACnH,QAAML,OAAO,iBAAGK,QAAQ,EAAX,+CAAG,WAAYC,IAAZ,CAAiBN,OAAjC;AACA,QAAMC,KAAK,GAAK,MAAMH,KAAK,CAACS,GAAN,CAAW,GAAEC,OAAO,CAACC,GAAR,CAAYC,iBAAkB,YAAWV,OAAQ,cAA9D,CAAtB;AAEA,SAAOC,KAAK,CAACU,IAAb;AACD,CALkD,CAA5C;AAOP,OAAO,MAAME,YAAY,GAAGjB,gBAAgB,CAAC,6BAAD,EAAgC,OAAOQ,CAAP,EAAU;AAAEC,EAAAA;AAAF,CAAV,KAA2B;AAAA;;AACrG,QAAML,OAAO,iBAAMK,QAAQ,EAAd,+CAAM,WAAYC,IAAZ,CAAiBN,OAApC;AACA,QAAME,OAAO,GAAG,MAAMJ,KAAK,CAACS,GAAN,CAAW,GAAEC,OAAO,CAACC,GAAR,CAAYC,iBAAkB,YAAWV,OAAQ,cAA9D,CAAtB;AAEA,SAAOE,OAAO,CAACS,IAAf;AACD,CAL2C,CAArC;AAOP,OAAO,MAAMG,KAAK,GAAGjB,WAAW,CAAC;AAC/BkB,EAAAA,IAAI,EAAW,MADgB;AAE/BhB,EAAAA,YAF+B;AAG/BiB,EAAAA,aAAa,EAAE;AACb,KAACb,UAAU,CAACc,SAAZ,GAAiC,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAwB;AACvDD,MAAAA,KAAK,CAACjB,KAAN,GAAckB,OAAd;AACD,KAHY;AAIb,KAACP,mBAAmB,CAACK,SAArB,GAAiC,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAwB;AACvDD,MAAAA,KAAK,CAACE,UAAN,GAAmBD,OAAnB;AACD,KANY;AAOb,KAACN,YAAY,CAACI,SAAd,GAAiC,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAwB;AACvDD,MAAAA,KAAK,CAAChB,OAAN,GAAgBiB,OAAhB;AACD;AATY,GAHgB;AAc/BE,EAAAA,QAAQ,EAAO;AACbC,IAAAA,UAAU,EAAE,CAACJ,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAwB;AAClCD,MAAAA,KAAK,CAAClB,OAAN,GAAgBmB,OAAhB;AACD;AAHY;AAdgB,CAAD,CAAzB;AAqBP,OAAO,MAAM;AAAEG,EAAAA;AAAF,IAAiBR,KAAK,CAACS,OAA7B;AAEP,eAAeT,KAAK,CAACU,OAArB","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\nconst initialState = {\n  lobbyId: '',\n  teams:   [],\n  results: [],\n};\n\nexport const fetchTeams = createAsyncThunk('category/fetchTeamsStatus', async (_, { getState }) => {\n  const lobbyId = getState()?.quiz.lobbyId;\n  const teams   = await axios.get(`${process.env.REACT_APP_API_URI}/lobbies/${lobbyId}/teams`);\n\n  return teams.data;\n});\n\nexport const fetchCorrectAnswers = createAsyncThunk('category/fetchCorrectAnswersStatus', async (_, { getState }) => {\n  const lobbyId = getState()?.quiz.lobbyId;\n  const teams   = await axios.get(`${process.env.REACT_APP_API_URI}/lobbies/${lobbyId}/round-score`);\n\n  return teams.data;\n});\n\nexport const fetchResults = createAsyncThunk('category/fetchResultsStatus', async (_, { getState }) => {\n  const lobbyId    = getState()?.quiz.lobbyId;\n  const results = await axios.get(`${process.env.REACT_APP_API_URI}/lobbies/${lobbyId}/lobby-score`);\n\n  return results.data;\n});\n\nexport const slice = createSlice({\n  name:          'quiz',\n  initialState,\n  extraReducers: {\n    [fetchTeams.fulfilled]:          (state, { payload }) => {\n      state.teams = payload;\n    },\n    [fetchCorrectAnswers.fulfilled]: (state, { payload }) => {\n      state.roundScore = payload;\n    },\n    [fetchResults.fulfilled]:        (state, { payload }) => {\n      state.results = payload;\n    }\n  },\n  reducers:      {\n    setLobbyId: (state, { payload }) => {\n      state.lobbyId = payload;\n    }\n  }\n});\n\nexport const { setLobbyId } = slice.actions;\n\nexport default slice.reducer;"]},"metadata":{},"sourceType":"module"}