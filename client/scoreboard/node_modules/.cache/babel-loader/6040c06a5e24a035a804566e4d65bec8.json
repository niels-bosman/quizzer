{"ast":null,"code":"var _jsxFileName = \"/home/niels/Projects/school/quizzer/client/scoreboard/src/components/WinnerGraph.js\",\n    _s = $RefreshSig$();\n\nimport WinnerGraphBar from './WinnerGraphBar';\nimport { useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst WinnerGraph = () => {\n  _s();\n\n  const results = useSelector(({\n    quiz\n  }) => quiz.results);\n\n  const calculatePercentage = (maxScore, ownScore) => Math.round(ownScore / maxScore * 100 / 1.5);\n\n  let orderedWinners = [];\n  let first;\n  let second;\n  let third;\n\n  if (results.length >= 3) {\n    [first, second, third] = [...results];\n  } else if (results.length === 2) {\n    [first, second] = [...results];\n  } else if (results.length === 1) {\n    [first] = [...results];\n  }\n\n  if (second) {\n    orderedWinners.push({ ...second,\n      percentage: calculatePercentage(first.score, second.score)\n    });\n  }\n\n  if (first) {\n    orderedWinners.push({ ...first,\n      percentage: 100\n    });\n  }\n\n  if (third) {\n    orderedWinners.push({ ...second,\n      percentage: calculatePercentage(first.score, third.score)\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"m-winner-graph\",\n    children: orderedWinners.map((winner, index) => /*#__PURE__*/_jsxDEV(WinnerGraphBar, {\n      name: winner._id,\n      score: winner.score,\n      place: index + 1 === 1 ? 2 : index + 1 === 2 ? 1 : 3,\n      percentage: winner.percentage\n    }, winner._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n_s(WinnerGraph, \"Yag2PiJG5nhVgIZD/LrVw7fEXBE=\", false, function () {\n  return [useSelector];\n});\n\n_c = WinnerGraph;\nexport default WinnerGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"WinnerGraph\");","map":{"version":3,"sources":["/home/niels/Projects/school/quizzer/client/scoreboard/src/components/WinnerGraph.js"],"names":["WinnerGraphBar","useSelector","WinnerGraph","results","quiz","calculatePercentage","maxScore","ownScore","Math","round","orderedWinners","first","second","third","length","push","percentage","score","map","winner","index","_id"],"mappings":";;;AAAA,OAAOA,cAAP,MAA2B,kBAA3B;AACA,SAASC,WAAT,QAA4B,aAA5B;;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACxB,QAAMC,OAAO,GAAGF,WAAW,CAAC,CAAC;AAAEG,IAAAA;AAAF,GAAD,KAAcA,IAAI,CAACD,OAApB,CAA3B;;AAEA,QAAME,mBAAmB,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwBC,IAAI,CAACC,KAAL,CAAYF,QAAQ,GAAGD,QAAZ,GAAwB,GAAxB,GAA8B,GAAzC,CAApD;;AAEA,MAAII,cAAc,GAAG,EAArB;AACA,MAAIC,KAAJ;AACA,MAAIC,MAAJ;AACA,MAAIC,KAAJ;;AAEA,MAAIV,OAAO,CAACW,MAAR,IAAkB,CAAtB,EAAyB;AACvB,KAACH,KAAD,EAAQC,MAAR,EAAgBC,KAAhB,IAAyB,CAAC,GAAGV,OAAJ,CAAzB;AACD,GAFD,MAEO,IAAIA,OAAO,CAACW,MAAR,KAAmB,CAAvB,EAA0B;AAC/B,KAACH,KAAD,EAAQC,MAAR,IAAkB,CAAC,GAAGT,OAAJ,CAAlB;AACD,GAFM,MAEA,IAAIA,OAAO,CAACW,MAAR,KAAmB,CAAvB,EAA0B;AAC/B,KAACH,KAAD,IAAU,CAAC,GAAGR,OAAJ,CAAV;AACD;;AAED,MAAIS,MAAJ,EAAY;AACVF,IAAAA,cAAc,CAACK,IAAf,CAAoB,EAAE,GAAGH,MAAL;AAAaI,MAAAA,UAAU,EAAEX,mBAAmB,CAACM,KAAK,CAACM,KAAP,EAAcL,MAAM,CAACK,KAArB;AAA5C,KAApB;AACD;;AAED,MAAIN,KAAJ,EAAW;AACTD,IAAAA,cAAc,CAACK,IAAf,CAAoB,EAAE,GAAGJ,KAAL;AAAYK,MAAAA,UAAU,EAAE;AAAxB,KAApB;AACD;;AAED,MAAIH,KAAJ,EAAW;AACTH,IAAAA,cAAc,CAACK,IAAf,CAAoB,EAAE,GAAGH,MAAL;AAAaI,MAAAA,UAAU,EAAEX,mBAAmB,CAACM,KAAK,CAACM,KAAP,EAAcJ,KAAK,CAACI,KAApB;AAA5C,KAApB;AACD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,cACGP,cAAc,CAACQ,GAAf,CAAmB,CAACC,MAAD,EAASC,KAAT,kBAClB,QAAC,cAAD;AACE,MAAA,IAAI,EAAED,MAAM,CAACE,GADf;AAEE,MAAA,KAAK,EAAEF,MAAM,CAACF,KAFhB;AAGE,MAAA,KAAK,EAAEG,KAAK,GAAG,CAAR,KAAc,CAAd,GAAkB,CAAlB,GAAsBA,KAAK,GAAG,CAAR,KAAc,CAAd,GAAkB,CAAlB,GAAsB,CAHrD;AAIE,MAAA,UAAU,EAAED,MAAM,CAACH;AAJrB,OAKOG,MAAM,CAACE,GALd;AAAA;AAAA;AAAA;AAAA,YADD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CA3CD;;GAAMnB,W;UACYD,W;;;KADZC,W;AA6CN,eAAeA,WAAf","sourcesContent":["import WinnerGraphBar from './WinnerGraphBar';\nimport { useSelector } from 'react-redux';\n\nconst WinnerGraph = () => {\n  const results = useSelector(({ quiz }) => quiz.results);\n\n  const calculatePercentage = (maxScore, ownScore) => Math.round((ownScore / maxScore) * 100 / 1.5);\n\n  let orderedWinners = [];\n  let first;\n  let second;\n  let third;\n\n  if (results.length >= 3) {\n    [first, second, third] = [...results];\n  } else if (results.length === 2) {\n    [first, second] = [...results];\n  } else if (results.length === 1) {\n    [first] = [...results];\n  }\n\n  if (second) {\n    orderedWinners.push({ ...second, percentage: calculatePercentage(first.score, second.score) });\n  }\n\n  if (first) {\n    orderedWinners.push({ ...first, percentage: 100 });\n  }\n\n  if (third) {\n    orderedWinners.push({ ...second, percentage: calculatePercentage(first.score, third.score) });\n  }\n\n  return (\n    <div className=\"m-winner-graph\">\n      {orderedWinners.map((winner, index) => (\n        <WinnerGraphBar\n          name={winner._id}\n          score={winner.score}\n          place={index + 1 === 1 ? 2 : index + 1 === 2 ? 1 : 3}\n          percentage={winner.percentage}\n          key={winner._id}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default WinnerGraph;"]},"metadata":{},"sourceType":"module"}