{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { io } from 'socket.io-client';\nconst socket = io('ws://localhost:3000', {\n  reconnectionDelayMax: 10000,\n  withCredentials: true\n});\nconst initialState = {\n  loading: false,\n  teamName: '',\n  lobbyId: ''\n};\nexport const joinGame = createAsyncThunk('quiz/joinGameStatus', async ({\n  lobbyId,\n  teamName\n}) => {\n  console.log(lobbyId);\n  console.log(teamName);\n  socket.emit('TEAM_CONNECT', {\n    lobbyId,\n    teamName\n  });\n  await new Promise(resolve => setTimeout(resolve, 1000));\n});\nexport const slice = createSlice({\n  name: 'quiz',\n  initialState,\n  reducers: {\n    setLobbyId: (state, {\n      payload\n    }) => {\n      state.lobbyId = payload;\n    },\n    setTeamName: (state, {\n      payload\n    }) => {\n      state.teamName = payload;\n    }\n  },\n  extraReducers: {\n    [joinGame.pending]: state => {\n      state.loading = true;\n    },\n    [joinGame.fulfilled]: state => {\n      state.loading = false;\n    },\n    [joinGame.rejected]: state => {\n      state.loading = false;\n    }\n  }\n});\nexport const {\n  setLobbyId,\n  setTeamName\n} = slice.actions;\nexport default slice.reducer;","map":{"version":3,"sources":["/home/niels/Projects/school/quizzer/client/team/src/reducers/quiz.js"],"names":["createAsyncThunk","createSlice","io","socket","reconnectionDelayMax","withCredentials","initialState","loading","teamName","lobbyId","joinGame","console","log","emit","Promise","resolve","setTimeout","slice","name","reducers","setLobbyId","state","payload","setTeamName","extraReducers","pending","fulfilled","rejected","actions","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAASC,EAAT,QAAmB,kBAAnB;AAEA,MAAMC,MAAM,GAAGD,EAAE,CAAC,qBAAD,EAAwB;AACvCE,EAAAA,oBAAoB,EAAE,KADiB;AAEvCC,EAAAA,eAAe,EAAO;AAFiB,CAAxB,CAAjB;AAKA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAG,KADS;AAEnBC,EAAAA,QAAQ,EAAE,EAFS;AAGnBC,EAAAA,OAAO,EAAG;AAHS,CAArB;AAMA,OAAO,MAAMC,QAAQ,GAAGV,gBAAgB,CACtC,qBADsC,EAEtC,OAAO;AAAES,EAAAA,OAAF;AAAWD,EAAAA;AAAX,CAAP,KAAiC;AAE/BG,EAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AAEAL,EAAAA,MAAM,CAACU,IAAP,CAAY,cAAZ,EAA4B;AAAEJ,IAAAA,OAAF;AAAWD,IAAAA;AAAX,GAA5B;AAEA,QAAM,IAAIM,OAAJ,CAAYC,OAAO,IAAIC,UAAU,CAACD,OAAD,EAAU,IAAV,CAAjC,CAAN;AACD,CAVqC,CAAjC;AAaP,OAAO,MAAME,KAAK,GAAGhB,WAAW,CAAC;AAC/BiB,EAAAA,IAAI,EAAW,MADgB;AAE/BZ,EAAAA,YAF+B;AAG/Ba,EAAAA,QAAQ,EAAO;AACbC,IAAAA,UAAU,EAAG,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAwB;AACnCD,MAAAA,KAAK,CAACZ,OAAN,GAAgBa,OAAhB;AACD,KAHY;AAIbC,IAAAA,WAAW,EAAE,CAACF,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAwB;AACnCD,MAAAA,KAAK,CAACb,QAAN,GAAiBc,OAAjB;AACD;AANY,GAHgB;AAW/BE,EAAAA,aAAa,EAAE;AACb,KAACd,QAAQ,CAACe,OAAV,GAAsBJ,KAAK,IAAI;AAC7BA,MAAAA,KAAK,CAACd,OAAN,GAAgB,IAAhB;AACD,KAHY;AAIb,KAACG,QAAQ,CAACgB,SAAV,GAAsBL,KAAK,IAAI;AAC7BA,MAAAA,KAAK,CAACd,OAAN,GAAgB,KAAhB;AACD,KANY;AAOb,KAACG,QAAQ,CAACiB,QAAV,GAAsBN,KAAK,IAAI;AAC7BA,MAAAA,KAAK,CAACd,OAAN,GAAgB,KAAhB;AACD;AATY;AAXgB,CAAD,CAAzB;AAwBP,OAAO,MAAM;AAAEa,EAAAA,UAAF;AAAcG,EAAAA;AAAd,IAA8BN,KAAK,CAACW,OAA1C;AAEP,eAAeX,KAAK,CAACY,OAArB","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { io } from 'socket.io-client';\n\nconst socket = io('ws://localhost:3000', {\n  reconnectionDelayMax: 10000,\n  withCredentials:      true,\n});\n\nconst initialState = {\n  loading:  false,\n  teamName: '',\n  lobbyId:  ''\n};\n\nexport const joinGame = createAsyncThunk(\n  'quiz/joinGameStatus',\n  async ({ lobbyId, teamName }) => {\n\n    console.log(lobbyId);\n    console.log(teamName);\n\n    socket.emit('TEAM_CONNECT', { lobbyId, teamName });\n\n    await new Promise(resolve => setTimeout(resolve, 1000));\n  }\n);\n\nexport const slice = createSlice({\n  name:          'quiz',\n  initialState,\n  reducers:      {\n    setLobbyId:  (state, { payload }) => {\n      state.lobbyId = payload;\n    },\n    setTeamName: (state, { payload }) => {\n      state.teamName = payload;\n    }\n  },\n  extraReducers: {\n    [joinGame.pending]:   state => {\n      state.loading = true;\n    },\n    [joinGame.fulfilled]: state => {\n      state.loading = false;\n    },\n    [joinGame.rejected]:  state => {\n      state.loading = false;\n    },\n  },\n});\n\nexport const { setLobbyId, setTeamName } = slice.actions;\n\nexport default slice.reducer;"]},"metadata":{},"sourceType":"module"}