{"ast":null,"code":"import { io } from 'socket.io-client';\nlet ws;\n\nconst connect = lobbyId => {\n  ws.emit('TEAM_CONNECT', {\n    lobby: lobbyId\n  });\n};\n\nconst socket = (dispatch, state, history) => {\n  if (ws === undefined) {\n    ws = io('ws://localhost:3000', {\n      reconnectionDelayMax: 10000,\n      withCredentials: true\n    });\n  }\n\n  ws.on('message', ({\n    type,\n    payload\n  }) => {\n    switch (type) {\n      case 'TEAM_REMOVED':\n        if (payload.teamId === state.quiz.teamName) {\n          ws.emit('TEAM_DISCONNECT', {\n            lobby: state.quiz.lobbyId\n          });\n          history.push('/');\n        }\n\n        break;\n\n      default:\n        console.log(type);\n        console.table(payload);\n    }\n  });\n};\n\nexport { connect, socket };","map":{"version":3,"sources":["/home/niels/Projects/school/quizzer/client/team/src/socket.js"],"names":["io","ws","connect","lobbyId","emit","lobby","socket","dispatch","state","history","undefined","reconnectionDelayMax","withCredentials","on","type","payload","teamId","quiz","teamName","push","console","log","table"],"mappings":"AAAA,SAASA,EAAT,QAAmB,kBAAnB;AAEA,IAAIC,EAAJ;;AAEA,MAAMC,OAAO,GAAGC,OAAO,IAAI;AACzBF,EAAAA,EAAE,CAACG,IAAH,CAAQ,cAAR,EAAwB;AAAEC,IAAAA,KAAK,EAAEF;AAAT,GAAxB;AACD,CAFD;;AAIA,MAAMG,MAAM,GAAG,CAACC,QAAD,EAAWC,KAAX,EAAkBC,OAAlB,KAA8B;AAC3C,MAAIR,EAAE,KAAKS,SAAX,EAAsB;AACpBT,IAAAA,EAAE,GAAGD,EAAE,CAAC,qBAAD,EAAwB;AAAEW,MAAAA,oBAAoB,EAAE,KAAxB;AAA+BC,MAAAA,eAAe,EAAE;AAAhD,KAAxB,CAAP;AACD;;AAEDX,EAAAA,EAAE,CAACY,EAAH,CAAM,SAAN,EAAiB,CAAC;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAD,KAAuB;AACtC,YAAQD,IAAR;AACE,WAAK,cAAL;AACE,YAAIC,OAAO,CAACC,MAAR,KAAmBR,KAAK,CAACS,IAAN,CAAWC,QAAlC,EAA4C;AAC1CjB,UAAAA,EAAE,CAACG,IAAH,CAAQ,iBAAR,EAA2B;AAAEC,YAAAA,KAAK,EAAEG,KAAK,CAACS,IAAN,CAAWd;AAApB,WAA3B;AACAM,UAAAA,OAAO,CAACU,IAAR,CAAa,GAAb;AACD;;AACD;;AACF;AACEC,QAAAA,OAAO,CAACC,GAAR,CAAYP,IAAZ;AACAM,QAAAA,OAAO,CAACE,KAAR,CAAcP,OAAd;AATJ;AAWD,GAZD;AAaD,CAlBD;;AAoBA,SAASb,OAAT,EAAkBI,MAAlB","sourcesContent":["import { io } from 'socket.io-client';\n\nlet ws;\n\nconst connect = lobbyId => {\n  ws.emit('TEAM_CONNECT', { lobby: lobbyId });\n};\n\nconst socket = (dispatch, state, history) => {\n  if (ws === undefined) {\n    ws = io('ws://localhost:3000', { reconnectionDelayMax: 10000, withCredentials: true });\n  }\n\n  ws.on('message', ({ type, payload }) => {\n    switch (type) {\n      case 'TEAM_REMOVED':\n        if (payload.teamId === state.quiz.teamName) {\n          ws.emit('TEAM_DISCONNECT', { lobby: state.quiz.lobbyId });\n          history.push('/');\n        }\n        break;\n      default:\n        console.log(type);\n        console.table(payload);\n    }\n  });\n};\n\nexport { connect, socket };"]},"metadata":{},"sourceType":"module"}