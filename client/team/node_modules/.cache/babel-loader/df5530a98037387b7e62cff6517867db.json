{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { BASE_URL } from '../api';\nconst initialState = {\n  teamName: '',\n  lobbyId: '',\n  question: {},\n  givenAnswer: ''\n};\nexport const joinGame = createAsyncThunk('quiz/joinGameStatus', async ({\n  lobbyId,\n  teamName\n}) => {\n  try {\n    const {\n      status\n    } = await axios.post(`${BASE_URL}/lobbies/${lobbyId}/teams`, {\n      teamName\n    });\n    return {\n      status\n    };\n  } catch ({\n    response: {\n      status\n    }\n  }) {\n    return {\n      status\n    };\n  }\n});\nexport const getQuestion = createAsyncThunk('quiz/getQuestionStatus', async ({\n  lobbyId\n}) => {\n  try {\n    const response = await axios.get(`${process.env.REACT_APP_API_URI}/lobbies/${lobbyId}/question`);\n    return {\n      data: response.data,\n      status: response.status\n    };\n  } catch (error) {\n    return {\n      data: error.response.data,\n      status: error.response.status\n    };\n  }\n});\nexport const submitAnswer = createAsyncThunk('quiz/submitAnswerStatus', async ({\n  lobbyId,\n  teamName,\n  givenAnswer\n}) => {\n  try {\n    const {\n      status\n    } = await axios.post(`${BASE_URL}/lobbies/${lobbyId}/answer`, {\n      teamName,\n      givenAnswer\n    });\n    return {\n      status\n    };\n  } catch ({\n    response: {\n      status\n    }\n  }) {\n    return {\n      status\n    };\n  }\n});\nexport const slice = createSlice({\n  name: 'quiz',\n  initialState,\n  reducers: {\n    resetAll: state => state = initialState,\n    setLobbyId: (state, {\n      payload\n    }) => {\n      state.lobbyId = payload;\n    },\n    setTeamName: (state, {\n      payload\n    }) => {\n      state.teamName = payload;\n    },\n    setAnswer: (state, {\n      payload\n    }) => {\n      state.givenAnswer = payload;\n    }\n  },\n  extraReducers: {\n    [joinGame.pending]: state => {\n      state.loading = true;\n    },\n    [joinGame.fulfilled]: state => {\n      state.loading = false;\n    },\n    [joinGame.rejected]: state => {\n      state.loading = false;\n    },\n    [getQuestion.fulfilled]: (state, {\n      payload\n    }) => {\n      state.question = {\n        question: payload.data.question,\n        category: payload.data.category\n      };\n    }\n  }\n});\nexport const {\n  setLobbyId,\n  setTeamName,\n  setAnswer,\n  resetAll\n} = slice.actions;\nexport default slice.reducer;","map":{"version":3,"sources":["/home/niels/Projects/school/quizzer/client/team/src/reducers/quiz.js"],"names":["createAsyncThunk","createSlice","axios","BASE_URL","initialState","teamName","lobbyId","question","givenAnswer","joinGame","status","post","response","getQuestion","get","process","env","REACT_APP_API_URI","data","error","submitAnswer","slice","name","reducers","resetAll","state","setLobbyId","payload","setTeamName","setAnswer","extraReducers","pending","loading","fulfilled","rejected","category","actions","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { BASE_URL } from '../api';\n\nconst initialState = {\n  teamName:    '',\n  lobbyId:     '',\n  question:    {},\n  givenAnswer: ''\n};\n\nexport const joinGame = createAsyncThunk('quiz/joinGameStatus', async ({ lobbyId, teamName }) => {\n  try {\n    const { status } = await axios.post(`${BASE_URL}/lobbies/${lobbyId}/teams`, { teamName });\n    return { status };\n  } catch ({ response: { status } }) {\n    return { status };\n  }\n});\n\nexport const getQuestion = createAsyncThunk('quiz/getQuestionStatus', async ({ lobbyId }) => {\n  try {\n    const response = await axios.get(`${process.env.REACT_APP_API_URI}/lobbies/${lobbyId}/question`);\n    return { data: response.data, status: response.status };\n  } catch (error) {\n    return { data: error.response.data, status: error.response.status };\n  }\n});\n\nexport const submitAnswer = createAsyncThunk('quiz/submitAnswerStatus', async ({ lobbyId, teamName, givenAnswer }) => {\n\n    try {\n      const { status } = await axios.post(`${BASE_URL}/lobbies/${lobbyId}/answer`, { teamName, givenAnswer });\n\n      return { status };\n    } catch ({ response: { status } }) {\n      return { status };\n    }\n\n  }\n);\n\nexport const slice = createSlice({\n  name:          'quiz',\n  initialState,\n  reducers:      {\n    resetAll: state => state = initialState,\n\n    setLobbyId:  (state, { payload }) => {\n      state.lobbyId = payload;\n    },\n    setTeamName: (state, { payload }) => {\n      state.teamName = payload;\n    },\n    setAnswer:   (state, { payload }) => {\n      state.givenAnswer = payload;\n    }\n  },\n  extraReducers: {\n    [joinGame.pending]:      state => {\n      state.loading = true;\n    },\n    [joinGame.fulfilled]:    state => {\n      state.loading = false;\n    },\n    [joinGame.rejected]:     state => {\n      state.loading = false;\n    },\n    [getQuestion.fulfilled]: (state, { payload }) => {\n      state.question = { question: payload.data.question, category: payload.data.category };\n    },\n  },\n});\n\nexport const { setLobbyId, setTeamName, setAnswer, resetAll } = slice.actions;\n\nexport default slice.reducer;"]},"metadata":{},"sourceType":"module"}