{"ast":null,"code":"var _jsxFileName = \"/home/niels/Projects/school/quizzer/client/team/src/components/pages/Question.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { getQuestion, setAnswer, submitAnswer } from '../../reducers/quiz';\nimport { useDispatch, useSelector } from 'react-redux';\nimport InfoLabel from '../InfoLabel';\nimport TextAreaInput from '../TextAreaInput';\nimport SubTitle from '../SubTitle';\nimport Button from '../Button';\nimport { useHistory } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Question = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const question = useSelector(({\n    quiz\n  }) => quiz.question);\n  const givenAnswer = useSelector(({\n    quiz\n  }) => quiz.givenAnswer);\n  const lobbyId = useSelector(({\n    quiz\n  }) => quiz.lobbyId);\n  const teamName = useSelector(({\n    quiz\n  }) => quiz.teamName);\n  const history = useHistory();\n  useEffect(() => {\n    dispatch(getQuestion({\n      lobbyId\n    }));\n  }, [dispatch, lobbyId]);\n\n  const submit = async event => {\n    event.preventDefault();\n    const {\n      payload\n    } = await dispatch(submitAnswer({\n      lobbyId,\n      teamName,\n      givenAnswer\n    }));\n\n    switch (payload.status) {\n      case 400:\n        break;\n\n      case 403:\n        break;\n\n      default:\n        history.push('/question/answered');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(InfoLabel, {\n      children: question.category\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"a-container\",\n      children: [/*#__PURE__*/_jsxDEV(SubTitle, {\n        children: question.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextAreaInput, {\n        value: givenAnswer,\n        onChange: e => dispatch(setAnswer(e.target.value))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: submit,\n        children: \"Insturen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Question, \"E1Ib9CluzUDg3zKoinNGziXA+xY=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useHistory];\n});\n\n_c = Question;\nexport default Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"sources":["/home/niels/Projects/school/quizzer/client/team/src/components/pages/Question.js"],"names":["useEffect","getQuestion","setAnswer","submitAnswer","useDispatch","useSelector","InfoLabel","TextAreaInput","SubTitle","Button","useHistory","Question","dispatch","question","quiz","givenAnswer","lobbyId","teamName","history","submit","event","preventDefault","payload","status","push","category","e","target","value"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,YAAjC,QAAqD,qBAArD;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SAASC,UAAT,QAA2B,kBAA3B;;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACrB,QAAMC,QAAQ,GAAMR,WAAW,EAA/B;AACA,QAAMS,QAAQ,GAAMR,WAAW,CAAC,CAAC;AAAES,IAAAA;AAAF,GAAD,KAAcA,IAAI,CAACD,QAApB,CAA/B;AACA,QAAME,WAAW,GAAGV,WAAW,CAAC,CAAC;AAAES,IAAAA;AAAF,GAAD,KAAcA,IAAI,CAACC,WAApB,CAA/B;AACA,QAAMC,OAAO,GAAOX,WAAW,CAAC,CAAC;AAAES,IAAAA;AAAF,GAAD,KAAcA,IAAI,CAACE,OAApB,CAA/B;AACA,QAAMC,QAAQ,GAAMZ,WAAW,CAAC,CAAC;AAAES,IAAAA;AAAF,GAAD,KAAcA,IAAI,CAACG,QAApB,CAA/B;AACA,QAAMC,OAAO,GAAOR,UAAU,EAA9B;AAEAV,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,QAAQ,CAACX,WAAW,CAAC;AAAEe,MAAAA;AAAF,KAAD,CAAZ,CAAR;AACD,GAFQ,EAEN,CAACJ,QAAD,EAAWI,OAAX,CAFM,CAAT;;AAIA,QAAMG,MAAM,GAAG,MAAMC,KAAN,IAAe;AAC5BA,IAAAA,KAAK,CAACC,cAAN;AAEA,UAAM;AAAEC,MAAAA;AAAF,QAAc,MAAMV,QAAQ,CAACT,YAAY,CAAC;AAAEa,MAAAA,OAAF;AAAWC,MAAAA,QAAX;AAAqBF,MAAAA;AAArB,KAAD,CAAb,CAAlC;;AAEA,YAAQO,OAAO,CAACC,MAAhB;AACE,WAAK,GAAL;AACE;;AACF,WAAK,GAAL;AACE;;AACF;AACEL,QAAAA,OAAO,CAACM,IAAR,CAAa,oBAAb;AANJ;AAQD,GAbD;;AAeA,sBACE;AAAA,4BACE,QAAC,SAAD;AAAA,gBAAYX,QAAQ,CAACY;AAArB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,8BACE,QAAC,QAAD;AAAA,kBAAWZ,QAAQ,CAACA;AAApB;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,aAAD;AAAe,QAAA,KAAK,EAAEE,WAAtB;AAAmC,QAAA,QAAQ,EAAEW,CAAC,IAAId,QAAQ,CAACV,SAAS,CAACwB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAV;AAA1D;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAET,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAUD,CArCD;;GAAMR,Q;UACgBP,W,EACAC,W,EACAA,W,EACAA,W,EACAA,W,EACAK,U;;;KANhBC,Q;AAuCN,eAAeA,QAAf","sourcesContent":["import { useEffect } from 'react';\nimport { getQuestion, setAnswer, submitAnswer } from '../../reducers/quiz';\nimport { useDispatch, useSelector } from 'react-redux';\nimport InfoLabel from '../InfoLabel';\nimport TextAreaInput from '../TextAreaInput';\nimport SubTitle from '../SubTitle';\nimport Button from '../Button';\nimport { useHistory } from 'react-router-dom';\n\nconst Question = () => {\n  const dispatch    = useDispatch();\n  const question    = useSelector(({ quiz }) => quiz.question);\n  const givenAnswer = useSelector(({ quiz }) => quiz.givenAnswer);\n  const lobbyId     = useSelector(({ quiz }) => quiz.lobbyId);\n  const teamName    = useSelector(({ quiz }) => quiz.teamName);\n  const history     = useHistory();\n\n  useEffect(() => {\n    dispatch(getQuestion({ lobbyId }));\n  }, [dispatch, lobbyId]);\n\n  const submit = async event => {\n    event.preventDefault();\n\n    const { payload } = await dispatch(submitAnswer({ lobbyId, teamName, givenAnswer }));\n\n    switch (payload.status) {\n      case 400:\n        break;\n      case 403:\n        break;\n      default:\n        history.push('/question/answered');\n    }\n  };\n\n  return (\n    <>\n      <InfoLabel>{question.category}</InfoLabel>\n      <div className=\"a-container\">\n        <SubTitle>{question.question}</SubTitle>\n        <TextAreaInput value={givenAnswer} onChange={e => dispatch(setAnswer(e.target.value))} />\n        <Button onClick={submit}>Insturen</Button>\n      </div>\n    </>\n  );\n};\n\nexport default Question;\n"]},"metadata":{},"sourceType":"module"}