{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { BASE_URL } from '../api';\nconst initialState = {\n  all: [],\n  current: '',\n  answers: [],\n  open: true\n};\nexport const fetchQuestions = createAsyncThunk('question/fetchQuestionsStatus', async (_, {\n  getState\n}) => {\n  var _getState;\n\n  const {\n    lobbyId\n  } = (_getState = getState()) === null || _getState === void 0 ? void 0 : _getState.quiz;\n  const {\n    data\n  } = await axios.get(`${BASE_URL}/lobbies/${lobbyId}/questions`);\n  return data;\n});\nexport const fetchAnswers = createAsyncThunk('question/fetchAnswersStatus', async (_, {\n  getState\n}) => {\n  var _getState2;\n\n  const {\n    lobbyId\n  } = (_getState2 = getState()) === null || _getState2 === void 0 ? void 0 : _getState2.quiz;\n  const {\n    data\n  } = await axios.get(`${BASE_URL}/lobbies/${lobbyId}/answers`);\n  return data;\n});\nexport const slice = createSlice({\n  name: 'question',\n  initialState,\n  extraReducers: {\n    [fetchQuestions.fulfilled]: (state, {\n      payload\n    }) => {\n      state.all = payload;\n      state.current = initialState.current;\n    },\n    [fetchAnswers.fulfilled]: (state, {\n      payload\n    }) => {\n      state.answers = payload;\n    }\n  },\n  reducers: {\n    resetAllQuestion: state => state = initialState,\n    setCurrentQuestion: (state, {\n      payload\n    }) => {\n      state.current = payload;\n    },\n    setCurrentAnswer: (state, {\n      payload\n    }) => {\n      state.currentAnswer = payload;\n    },\n    setQuestionOpen: (state, {\n      payload\n    }) => {\n      state.open = !!payload;\n    },\n    resetGivenAnswers: state => {\n      state.answers = initialState.answers;\n    }\n  }\n});\nexport const {\n  setCurrentQuestion,\n  setCurrentAnswer,\n  setQuestionOpen,\n  resetGivenAnswers,\n  resetAllQuestion\n} = slice.actions;\nexport default slice.reducer;","map":{"version":3,"sources":["/home/niels/Projects/school/quizzer/client/quizmaster/src/reducers/question.js"],"names":["createAsyncThunk","createSlice","axios","BASE_URL","initialState","all","current","answers","open","fetchQuestions","_","getState","lobbyId","quiz","data","get","fetchAnswers","slice","name","extraReducers","fulfilled","state","payload","reducers","resetAllQuestion","setCurrentQuestion","setCurrentAnswer","currentAnswer","setQuestionOpen","resetGivenAnswers","actions","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,QAAzB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,GAAG,EAAM,EADU;AAEnBC,EAAAA,OAAO,EAAE,EAFU;AAGnBC,EAAAA,OAAO,EAAE,EAHU;AAInBC,EAAAA,IAAI,EAAK;AAJU,CAArB;AAOA,OAAO,MAAMC,cAAc,GAAGT,gBAAgB,CAAC,+BAAD,EAAkC,OAAOU,CAAP,EAAU;AAAEC,EAAAA;AAAF,CAAV,KAA2B;AAAA;;AACzG,QAAM;AAAEC,IAAAA;AAAF,mBAAcD,QAAQ,EAAtB,8CAAc,UAAYE,IAAhC;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAc,MAAMZ,KAAK,CAACa,GAAN,CAAW,GAAEZ,QAAS,YAAWS,OAAQ,YAAzC,CAA1B;AAEA,SAAOE,IAAP;AACD,CAL6C,CAAvC;AAOP,OAAO,MAAME,YAAY,GAAGhB,gBAAgB,CAAC,6BAAD,EAAgC,OAAOU,CAAP,EAAU;AAAEC,EAAAA;AAAF,CAAV,KAA2B;AAAA;;AACrG,QAAM;AAAEC,IAAAA;AAAF,oBAAcD,QAAQ,EAAtB,+CAAc,WAAYE,IAAhC;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAc,MAAMZ,KAAK,CAACa,GAAN,CAAW,GAAEZ,QAAS,YAAWS,OAAQ,UAAzC,CAA1B;AAEA,SAAOE,IAAP;AACD,CAL2C,CAArC;AAOP,OAAO,MAAMG,KAAK,GAAGhB,WAAW,CAAC;AAC/BiB,EAAAA,IAAI,EAAW,UADgB;AAE/Bd,EAAAA,YAF+B;AAG/Be,EAAAA,aAAa,EAAE;AACb,KAACV,cAAc,CAACW,SAAhB,GAA4B,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAwB;AAClDD,MAAAA,KAAK,CAAChB,GAAN,GAAgBiB,OAAhB;AACAD,MAAAA,KAAK,CAACf,OAAN,GAAgBF,YAAY,CAACE,OAA7B;AACD,KAJY;AAKb,KAACU,YAAY,CAACI,SAAd,GAA4B,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAwB;AAClDD,MAAAA,KAAK,CAACd,OAAN,GAAgBe,OAAhB;AACD;AAPY,GAHgB;AAY/BC,EAAAA,QAAQ,EAAO;AACbC,IAAAA,gBAAgB,EAAEH,KAAK,IAAIA,KAAK,GAAGjB,YADtB;AAGbqB,IAAAA,kBAAkB,EAAE,CAACJ,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAwB;AAC1CD,MAAAA,KAAK,CAACf,OAAN,GAAgBgB,OAAhB;AACD,KALY;AAMbI,IAAAA,gBAAgB,EAAI,CAACL,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAwB;AAC1CD,MAAAA,KAAK,CAACM,aAAN,GAAsBL,OAAtB;AACD,KARY;AASbM,IAAAA,eAAe,EAAK,CAACP,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAwB;AAC1CD,MAAAA,KAAK,CAACb,IAAN,GAAa,CAAC,CAACc,OAAf;AACD,KAXY;AAYbO,IAAAA,iBAAiB,EAAIR,KAAD,IAAW;AAC7BA,MAAAA,KAAK,CAACd,OAAN,GAAgBH,YAAY,CAACG,OAA7B;AACD;AAdY;AAZgB,CAAD,CAAzB;AA8BP,OAAO,MAAM;AACXkB,EAAAA,kBADW;AAEXC,EAAAA,gBAFW;AAGXE,EAAAA,eAHW;AAIXC,EAAAA,iBAJW;AAKXL,EAAAA;AALW,IAMTP,KAAK,CAACa,OANH;AAQP,eAAeb,KAAK,CAACc,OAArB","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { BASE_URL } from '../api';\n\nconst initialState = {\n  all:     [],\n  current: '',\n  answers: [],\n  open:    true,\n};\n\nexport const fetchQuestions = createAsyncThunk('question/fetchQuestionsStatus', async (_, { getState }) => {\n  const { lobbyId } = getState()?.quiz;\n  const { data }    = await axios.get(`${BASE_URL}/lobbies/${lobbyId}/questions`);\n\n  return data;\n});\n\nexport const fetchAnswers = createAsyncThunk('question/fetchAnswersStatus', async (_, { getState }) => {\n  const { lobbyId } = getState()?.quiz;\n  const { data }    = await axios.get(`${BASE_URL}/lobbies/${lobbyId}/answers`);\n\n  return data;\n});\n\nexport const slice = createSlice({\n  name:          'question',\n  initialState,\n  extraReducers: {\n    [fetchQuestions.fulfilled]: (state, { payload }) => {\n      state.all     = payload;\n      state.current = initialState.current;\n    },\n    [fetchAnswers.fulfilled]:   (state, { payload }) => {\n      state.answers = payload;\n    },\n  },\n  reducers:      {\n    resetAllQuestion: state => state = initialState,\n\n    setCurrentQuestion: (state, { payload }) => {\n      state.current = payload;\n    },\n    setCurrentAnswer:   (state, { payload }) => {\n      state.currentAnswer = payload;\n    },\n    setQuestionOpen:    (state, { payload }) => {\n      state.open = !!payload;\n    },\n    resetGivenAnswers:  (state) => {\n      state.answers = initialState.answers;\n    },\n  }\n});\n\nexport const {\n  setCurrentQuestion,\n  setCurrentAnswer,\n  setQuestionOpen,\n  resetGivenAnswers,\n  resetAllQuestion,\n} = slice.actions;\n\nexport default slice.reducer;"]},"metadata":{},"sourceType":"module"}