{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { BASE_URL } from '../api';\nconst initialState = {\n  language: 'nl',\n  lobbyId: '',\n  teams: []\n};\nexport const createLobby = createAsyncThunk('quiz/createLobbyStatus', async (masterCode, {\n  getState\n}) => {\n  var _getState;\n\n  const language = (_getState = getState()) === null || _getState === void 0 ? void 0 : _getState.quiz.language;\n\n  try {\n    const {\n      data,\n      status\n    } = await axios.post(`${BASE_URL}/lobbies`, {\n      language,\n      masterCode\n    });\n    return {\n      data,\n      status\n    };\n  } catch ({\n    response: {\n      data,\n      status\n    }\n  }) {\n    return {\n      data,\n      status\n    };\n  }\n});\nexport const fetchTeams = createAsyncThunk('quiz/fetchTeamsStatus', async (_, {\n  getState\n}) => {\n  var _getState2;\n\n  const lobbyId = (_getState2 = getState()) === null || _getState2 === void 0 ? void 0 : _getState2.quiz.lobbyId;\n  const {\n    data\n  } = await axios.get(`${BASE_URL}/lobbies/${lobbyId}/teams`);\n  return data;\n});\nexport const setLanguage = createAsyncThunk('quiz/setLanguageStatus', async (language, {\n  getState\n}) => {\n  var _getState3;\n\n  const lobbyId = (_getState3 = getState()) === null || _getState3 === void 0 ? void 0 : _getState3.quiz.lobbyId;\n  const {\n    data\n  } = await axios.post(`${BASE_URL}/lobbies/${lobbyId}/language/${language}`);\n  return data;\n});\nexport const slice = createSlice({\n  name: 'quiz',\n  initialState,\n  extraReducers: {\n    [createLobby.fulfilled]: (state, {\n      payload\n    }) => {\n      state.lobbyId = payload.data;\n    },\n    [fetchTeams.fulfilled]: (state, {\n      payload\n    }) => {\n      state.teams = payload;\n    },\n    [setLanguage.fulfilled]: (state, {\n      payload\n    }) => {\n      state.language = payload;\n    }\n  },\n  reducers: {\n    resetAllQuiz: state => state = initialState\n  }\n});\nexport const {\n  resetAllQuiz\n} = slice.actions;\nexport default slice.reducer;","map":{"version":3,"sources":["/home/niels/Projects/school/quizzer/client/quizmaster/src/reducers/quiz.js"],"names":["createAsyncThunk","createSlice","axios","BASE_URL","initialState","language","lobbyId","teams","createLobby","masterCode","getState","quiz","data","status","post","response","fetchTeams","_","get","setLanguage","slice","name","extraReducers","fulfilled","state","payload","reducers","resetAllQuiz","actions","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { BASE_URL } from '../api';\n\nconst initialState = {\n  language: 'nl',\n  lobbyId:  '',\n  teams:    [],\n};\n\nexport const createLobby = createAsyncThunk('quiz/createLobbyStatus', async (masterCode, { getState }) => {\n  const language = getState()?.quiz.language;\n  try {\n  const { data, status } = await axios.post(`${BASE_URL}/lobbies`, { language, masterCode });\n    return { data, status };\n  } catch ({ response: { data, status } }) {\n    return { data, status };\n  }\n});\n\nexport const fetchTeams = createAsyncThunk('quiz/fetchTeamsStatus', async (_, { getState }) => {\n  const lobbyId  = getState()?.quiz.lobbyId;\n  const { data } = await axios.get(`${BASE_URL}/lobbies/${lobbyId}/teams`);\n\n  return data;\n});\n\nexport const setLanguage = createAsyncThunk('quiz/setLanguageStatus', async (language, { getState }) => {\n  const lobbyId  = getState()?.quiz.lobbyId;\n  const { data } = await axios.post(`${BASE_URL}/lobbies/${lobbyId}/language/${language}`);\n\n  return data;\n});\n\nexport const slice = createSlice({\n  name:          'quiz',\n  initialState,\n  extraReducers: {\n    [createLobby.fulfilled]: (state, { payload }) => {\n      state.lobbyId = payload.data;\n    },\n    [fetchTeams.fulfilled]:  (state, { payload }) => {\n      state.teams = payload;\n    },\n    [setLanguage.fulfilled]: (state, { payload }) => {\n      state.language = payload;\n    },\n  },\n  reducers:      {\n    resetAllQuiz: state => state = initialState,\n  }\n});\n\nexport const { resetAllQuiz } = slice.actions;\n\nexport default slice.reducer;"]},"metadata":{},"sourceType":"module"}