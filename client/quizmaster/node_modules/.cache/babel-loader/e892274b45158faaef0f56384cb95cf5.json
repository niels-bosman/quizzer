{"ast":null,"code":"import { io } from 'socket.io-client';\nimport { fetchTeams, resetAllQuiz } from './reducers/quiz';\nimport { fetchAnswers, resetAllQuestion, resetGivenAnswers, setQuestionOpen } from './reducers/question';\nimport { resetAllCategory } from './reducers/category';\nlet ws;\n\nconst connect = lobby => ws.emit('MASTER_CONNECT', {\n  lobby\n});\n\nconst disconnect = lobby => ws.emit('MASTER_DISCONNECT', {\n  lobby\n});\n\nconst socket = (dispatch, state, history) => {\n  if (ws === undefined) {\n    ws = io('ws://localhost:3000', {\n      reconnectionDelayMax: 10000,\n      withCredentials: true\n    });\n  }\n\n  ws.off('message').on('message', ({\n    type\n  }) => {\n    switch (type) {\n      case 'TEAMS_CHANGED':\n        dispatch(fetchTeams());\n        break;\n\n      case 'TEAM_REMOVED':\n        dispatch(fetchTeams());\n        break;\n\n      case 'NEW_QUESTION':\n        dispatch(resetGivenAnswers());\n        dispatch(setQuestionOpen(true));\n        break;\n\n      case 'QUESTION_CLOSED':\n        dispatch(setQuestionOpen(false));\n        break;\n\n      case 'ROUND_FINISHED':\n        history.push('/round-finished');\n        break;\n\n      case 'LOBBY_FINISHED':\n        dispatch(resetAllQuestion());\n        dispatch(resetAllCategory());\n        dispatch(resetAllQuiz());\n        disconnect(state.quiz.lobbyId);\n        history.push('/');\n        break;\n\n      case 'NEW_ANSWER':\n        dispatch(fetchAnswers());\n        break;\n\n      default:\n        console.log(type);\n    }\n  });\n};\n\nexport { connect, socket };","map":{"version":3,"sources":["/home/niels/Projects/school/quizzer/client/quizmaster/src/socket.js"],"names":["io","fetchTeams","resetAllQuiz","fetchAnswers","resetAllQuestion","resetGivenAnswers","setQuestionOpen","resetAllCategory","ws","connect","lobby","emit","disconnect","socket","dispatch","state","history","undefined","reconnectionDelayMax","withCredentials","off","on","type","push","quiz","lobbyId","console","log"],"mappings":"AAAA,SAASA,EAAT,QAAmB,kBAAnB;AACA,SAASC,UAAT,EAAqBC,YAArB,QAAyC,iBAAzC;AACA,SAASC,YAAT,EAAuBC,gBAAvB,EAAyCC,iBAAzC,EAA4DC,eAA5D,QAAmF,qBAAnF;AACA,SAASC,gBAAT,QAAiC,qBAAjC;AAEA,IAAIC,EAAJ;;AAEA,MAAMC,OAAO,GAAGC,KAAK,IAAIF,EAAE,CAACG,IAAH,CAAQ,gBAAR,EAA0B;AAAED,EAAAA;AAAF,CAA1B,CAAzB;;AAEA,MAAME,UAAU,GAAGF,KAAK,IAAIF,EAAE,CAACG,IAAH,CAAQ,mBAAR,EAA6B;AAAED,EAAAA;AAAF,CAA7B,CAA5B;;AAEA,MAAMG,MAAM,GAAG,CAACC,QAAD,EAAWC,KAAX,EAAkBC,OAAlB,KAA8B;AAC3C,MAAIR,EAAE,KAAKS,SAAX,EAAsB;AACpBT,IAAAA,EAAE,GAAGR,EAAE,CAAC,qBAAD,EAAwB;AAAEkB,MAAAA,oBAAoB,EAAE,KAAxB;AAA+BC,MAAAA,eAAe,EAAE;AAAhD,KAAxB,CAAP;AACD;;AAEDX,EAAAA,EAAE,CAACY,GAAH,CAAO,SAAP,EAAkBC,EAAlB,CAAqB,SAArB,EAAgC,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAc;AAC5C,YAAQA,IAAR;AACE,WAAK,eAAL;AACER,QAAAA,QAAQ,CAACb,UAAU,EAAX,CAAR;AACA;;AACF,WAAK,cAAL;AACEa,QAAAA,QAAQ,CAACb,UAAU,EAAX,CAAR;AACA;;AACF,WAAK,cAAL;AACEa,QAAAA,QAAQ,CAACT,iBAAiB,EAAlB,CAAR;AACAS,QAAAA,QAAQ,CAACR,eAAe,CAAC,IAAD,CAAhB,CAAR;AACA;;AACF,WAAK,iBAAL;AACEQ,QAAAA,QAAQ,CAACR,eAAe,CAAC,KAAD,CAAhB,CAAR;AACA;;AACF,WAAK,gBAAL;AACEU,QAAAA,OAAO,CAACO,IAAR,CAAa,iBAAb;AACA;;AACF,WAAK,gBAAL;AACET,QAAAA,QAAQ,CAACV,gBAAgB,EAAjB,CAAR;AACAU,QAAAA,QAAQ,CAACP,gBAAgB,EAAjB,CAAR;AACAO,QAAAA,QAAQ,CAACZ,YAAY,EAAb,CAAR;AACAU,QAAAA,UAAU,CAACG,KAAK,CAACS,IAAN,CAAWC,OAAZ,CAAV;AACAT,QAAAA,OAAO,CAACO,IAAR,CAAa,GAAb;AACA;;AACF,WAAK,YAAL;AACET,QAAAA,QAAQ,CAACX,YAAY,EAAb,CAAR;AACA;;AACF;AACEuB,QAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AA5BJ;AA8BD,GA/BD;AAgCD,CArCD;;AAuCA,SAASb,OAAT,EAAkBI,MAAlB","sourcesContent":["import { io } from 'socket.io-client';\nimport { fetchTeams, resetAllQuiz } from './reducers/quiz';\nimport { fetchAnswers, resetAllQuestion, resetGivenAnswers, setQuestionOpen } from './reducers/question';\nimport { resetAllCategory } from './reducers/category';\n\nlet ws;\n\nconst connect = lobby => ws.emit('MASTER_CONNECT', { lobby });\n\nconst disconnect = lobby => ws.emit('MASTER_DISCONNECT', { lobby });\n\nconst socket = (dispatch, state, history) => {\n  if (ws === undefined) {\n    ws = io('ws://localhost:3000', { reconnectionDelayMax: 10000, withCredentials: true });\n  }\n\n  ws.off('message').on('message', ({ type }) => {\n    switch (type) {\n      case 'TEAMS_CHANGED':\n        dispatch(fetchTeams());\n        break;\n      case 'TEAM_REMOVED':\n        dispatch(fetchTeams());\n        break;\n      case 'NEW_QUESTION':\n        dispatch(resetGivenAnswers());\n        dispatch(setQuestionOpen(true));\n        break;\n      case 'QUESTION_CLOSED':\n        dispatch(setQuestionOpen(false));\n        break;\n      case 'ROUND_FINISHED':\n        history.push('/round-finished');\n        break;\n      case 'LOBBY_FINISHED':\n        dispatch(resetAllQuestion());\n        dispatch(resetAllCategory());\n        dispatch(resetAllQuiz());\n        disconnect(state.quiz.lobbyId);\n        history.push('/');\n        break;\n      case 'NEW_ANSWER':\n        dispatch(fetchAnswers());\n        break;\n      default:\n        console.log(type);\n    }\n  });\n};\n\nexport { connect, socket };"]},"metadata":{},"sourceType":"module"}